{"version":3,"sources":["components/Section.js","components/Options.js","components/Interface.js","components/Link.js","components/App.js","serviceWorker.js","index.js"],"names":["Section","props","className","onClick","e","handleClickRemoveSection","number","opener","arr","Option","value","lenght","Interface","options","i","state","createComponent","push","key","length","htmlFor","onChange","handleSelect","name","id","type","inputValue","handleInput","handleClick","selectedSection","handleClickNewSection","Link","href","text","target","rel","event","remover","App","temp","linkArr","undefined","childeren","config","hs","Options","handleClickOpenLinks","setState","index","findIndex","child","splice","index2","option","handleSelectSection","handleInputChange","handleClickAddElement","link","handleClickRemoveLink","test","parentNode","remove","forEach","element","window","open","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1df73781.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Section = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"section\">\r\n        <button\r\n          className={\"SectionBtnR\"}\r\n          onClick={(e) => {\r\n            props.handleClickRemoveSection(e, props.number);\r\n          }}\r\n        >\r\n          X\r\n        </button>\r\n        <button className={\"SectionBtnR\"}>Rename</button>\r\n\r\n        <h1>Links {props.number}</h1>\r\n        <br />\r\n        <button onClick={() => props.opener(props.number)}>Open All</button>\r\n        <br />\r\n        <br />\r\n        <ul>{props.arr[props.number]}</ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nconst Option = (props) => {\r\n  return (\r\n    <>\r\n      <option value={props.lenght}>Links {props.lenght}</option>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport Option from \"./Options\";\r\nconst Interface = (props) => {\r\n  const options = [];\r\n  for (let i = 0; i < props.state.createComponent; i++) {\r\n    options.push(<Option key={options.length} lenght={options.length} />);\r\n  }\r\n  return (\r\n    <>\r\n      <label htmlFor=\"interface\">\r\n        <select onChange={props.handleSelect} name=\"-\" id=\"interface\">\r\n          {props.state.options}\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          value={props.state.inputValue}\r\n          onChange={props.handleInput}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            props.handleClick(\r\n              props.state.selectedSection,\r\n              props.state.inputValue\r\n            );\r\n          }}\r\n        >\r\n          Add\r\n        </button>\r\n      </label>\r\n      <label>\r\n        Add new section\r\n        <button onClick={props.handleClickNewSection}> + </button>\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Interface;\r\n","import React from \"react\";\r\nconst Link = (props) => {\r\n  return (\r\n    <>\r\n      <li>\r\n        <a href={props.text} target='_blank' rel=\"noopener noreferrer\"> {props.text} </a>\r\n        <button\r\n          onClick={(event) => props.remover(event, props.number, props.id)}\r\n        >\r\n          X\r\n        </button>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Link;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Section from \"./Section\";\r\nimport Interface from \"./Interface\";\r\nimport Link from \"./Link\";\r\nimport Options from \"./Options\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    createComponent: 0,\r\n    temp: 0,\r\n    linkArr: {},\r\n    selectedSection: undefined,\r\n    inputValue: \"\",\r\n    childeren: [],\r\n    options: [],\r\n    id: 0,\r\n    config: [],\r\n  };\r\n\r\n  handleClickNewSection = (e) => {\r\n    let number = this.state.createComponent;\r\n    const hs = { ...this.state };\r\n    hs.linkArr[number] = [];\r\n    hs.createComponent += 1;\r\n    hs.id += 1;\r\n    hs.config.push(number);\r\n    if (hs.config.length === 1) {\r\n      hs.selectedSection = hs.config[0];\r\n    }\r\n    hs.options.push(<Options key={hs.id} lenght={number} />);\r\n    hs.childeren.push(\r\n      <Section\r\n        handleClickRemoveSection={this.handleClickRemoveSection}\r\n        arr={hs.linkArr}\r\n        number={number}\r\n        key={this.state.id}\r\n        opener={this.handleClickOpenLinks}\r\n      />\r\n    );\r\n    this.setState(hs);\r\n  };\r\n\r\n  handleClickRemoveSection = (e, number) => {\r\n    const hs = { ...this.state };\r\n    delete hs.linkArr[number];\r\n    let childs = hs.childeren;\r\n    let index = childs.findIndex((child) => child.props.number === number);\r\n    hs.config.splice(index, 1);\r\n    hs.childeren.splice(index, 1);\r\n    let options = hs.options;\r\n    let index2 = options.findIndex((option) => option.props.lenght === number);\r\n    hs.options.splice(index2, 1);\r\n    if (hs.options.length >= 1) {\r\n      hs.selectedSection = hs.options[0].props.lenght;\r\n    }\r\n\r\n    this.setState(hs);\r\n  };\r\n\r\n  handleSelectSection = (e) => {\r\n    this.setState({\r\n      selectedSection: e.target.value * 1,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      inputValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClickAddElement = (selectedSection, link) => {\r\n    if (link && this.state.childeren.length) {\r\n      const hs = { ...this.state };\r\n      hs.linkArr[selectedSection].push(\r\n        <Link\r\n          key={hs.id}\r\n          remover={this.handleClickRemoveLink}\r\n          number={selectedSection}\r\n          text={/https:\\/\\/|http:\\/\\//.test(link) ? link : 'http://' + link}\r\n          id={hs.id}\r\n        />\r\n      );\r\n      let arr = [];\r\n      let number = 0;\r\n      for (let i = 0; i < hs.childeren.length; i++) {\r\n        arr.push(\r\n          <Section\r\n            handleClickRemoveSection={this.handleClickRemoveSection}\r\n            arr={hs.linkArr}\r\n            number={hs.config[number]}\r\n            key={hs.id}\r\n            opener={this.handleClickOpenLinks}\r\n          />\r\n        );\r\n        ++number;\r\n        hs.id += 1;\r\n      }\r\n      hs.childeren = arr;\r\n      hs.inputValue = \"\";\r\n      this.setState(hs);\r\n    }\r\n  };\r\n\r\n  handleClickRemoveLink = (e, number, id) => {\r\n    e.target.parentNode.remove();\r\n    const hs = { ...this.state };\r\n    let index = hs.linkArr[number].findIndex((child) => child.props.id === id);\r\n    hs.linkArr[number].splice(index, 1);\r\n    this.setState(hs);\r\n  };\r\n\r\n  handleClickOpenLinks = (number) => {\r\n    const hs = { ...this.state };\r\n    let i = 0;\r\n    hs.linkArr[number].forEach((element) => {\r\n      window.open(element.props.text, `new${i}`);\r\n      ++i;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"div\">\r\n          <Interface\r\n            handleClickNewSection={this.handleClickNewSection}\r\n            handleSelect={this.handleSelectSection}\r\n            handleInput={this.handleInputChange}\r\n            handleClick={this.handleClickAddElement}\r\n            state={this.state}\r\n          />\r\n        </div>\r\n        <hr />\r\n        <div className=\"sections\">{this.state.childeren}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}